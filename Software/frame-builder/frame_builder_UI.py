#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jan 04, 2024 09:07:06 AM IST  platform: Linux
################################################################
# frame_builder_UI.py
# Dev: Rr42@GitHub
# File version: v1.0
# Python version: 3.8.10 (Linux)
# Description:
#   Class definitions for the UI interface for building
#  custom frame sequences and exporting them in a
#  serializable format.
################################################################

import tkinter as tk
# from tkinter.constants import *
import os.path

_location: str = os.path.dirname(__file__)

import frame_builder

_bgcolor: str = '#919191'
_fgcolor: str = 'black'
_tabfg1: str = 'black'
_tabfg2: str = 'white'
_bgmode: str = 'light'
_tabbg1: str = '#d9d9d9'
_tabbg2: str = 'gray40'

class frame_builder_UI:
    def __init__(self, top: tk.Tk) -> None:
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("776x565+384+164")
        top.minsize(1, 1)
        top.maxsize(1521, 930)
        top.resizable(True, True)
        top.title("USB-C DB Frame Builder")
        top.configure(background="#919191")
        top.configure(highlightbackground="#919191")
        top.configure(highlightcolor="black")

        self.top: tk.Tk = top

        self.Bgenerate: tk.Button = tk.Button(self.top)
        self.Bgenerate.place(relx=0.052, rely=0.46, height=31, width=134)
        self.Bgenerate.configure(activebackground="#d9d9d9")
        self.Bgenerate.configure(background="#919191")
        self.Bgenerate.configure(disabledforeground="#6d6d6d")
        self.Bgenerate.configure(highlightbackground="#919191")
        self.Bgenerate.configure(text='''Generate Frame''')
        self.Bgenerate.configure(command=frame_builder.generate_handle)

        self.Bupdate: tk.Button = tk.Button(self.top)
        self.Bupdate.place(relx=0.052, rely=0.549, height=31, width=134)
        self.Bupdate.configure(activebackground="#d9d9d9")
        self.Bupdate.configure(background="#919191")
        self.Bupdate.configure(disabledforeground="#6d6d6d")
        self.Bupdate.configure(font="-family {DejaVu Sans} -size 10")
        self.Bupdate.configure(highlightbackground="#919191")
        self.Bupdate.configure(text='''Update Frame''')
        self.Bupdate.configure(command=frame_builder.update_handle)

        self.Bload: tk.Button = tk.Button(self.top)
        self.Bload.place(relx=0.606, rely=0.903, height=31, width=134)
        self.Bload.configure(activebackground="#d9d9d9")
        self.Bload.configure(background="#919191")
        self.Bload.configure(disabledforeground="#6d6d6d")
        self.Bload.configure(font="-family {DejaVu Sans} -size 10")
        self.Bload.configure(highlightbackground="#919191")
        self.Bload.configure(text='''Load Frame''')
        self.Bload.configure(command=frame_builder.load_handle)

        self.Mtitle: tk.Message = tk.Message(self.top)
        self.Mtitle.place(relx=0.327, rely=0.025, relheight=0.048, relwidth=0.344)
        self.Mtitle.configure(background="#919191")
        self.Mtitle.configure(font="-family {DejaVu Sans} -size 10")
        self.Mtitle.configure(highlightbackground="#919191")
        self.Mtitle.configure(justify='center')
        self.Mtitle.configure(padx="1")
        self.Mtitle.configure(pady="1")
        self.Mtitle.configure(text='''USB-C DB Frame Builder''')
        self.Mtitle.configure(width=202)

        self.Toutput: tk.Text = tk.Text(self.top)
        self.Toutput.place(relx=0.052, rely=0.637, relheight=0.241, relwidth=0.732)
        self.Toutput.configure(background="white")
        self.Toutput.configure(font="TkTextFont")
        self.Toutput.configure(highlightbackground="#919191")
        self.Toutput.configure(selectbackground="#d9d9d9")
        self.Toutput.configure(tabstyle="wordprocessor")
        self.Toutput.configure(undo=True)
        self.Toutput.configure(wrap="word")

        self.Lselcolor = tk.Label(self.top)
        self.Lselcolor.place(relx=0.052, rely=0.106, height=21, width=136)
        self.Lselcolor.configure(activebackground="#d9d9d9")
        self.Lselcolor.configure(anchor='w')
        self.Lselcolor.configure(background="#ffffff")
        self.Lselcolor.configure(borderwidth="2")
        self.Lselcolor.configure(compound='left')
        self.Lselcolor.configure(disabledforeground="#6d6d6d")
        self.Lselcolor.configure(font="-family {DejaVu Sans} -size 10")
        self.Lselcolor.configure(highlightbackground="#ffffff")
        self.Lselcolor.configure(text='''Selected color''')

        self.LFselframe = tk.LabelFrame(self.top)
        self.LFselframe.place(relx=0.825, rely=0.088, relheight=0.788, relwidth=0.129)
        self.LFselframe.configure(relief='ridge')
        self.LFselframe.configure(font="-family {DejaVu Sans} -size 10")
        self.LFselframe.configure(relief="ridge")
        self.LFselframe.configure(text='''Frame select''')
        self.LFselframe.configure(background="#919191")
        self.LFselframe.configure(highlightbackground="#919191")

        self.LBselframe = tk.Listbox(self.LFselframe)
        self.LBselframe.place(relx=0.01, rely=0.04, relheight=0.951, relwidth=0.96, bordermode='ignore')
        self.LBselframe.configure(background="white")
        self.LBselframe.configure(disabledforeground="#6d6d6d")
        self.LBselframe.configure(font="TkFixedFont")
        self.LBselframe.configure(highlightbackground="#919191")
        self.LBselframe.configure(relief="ridge")
        self.LBselframe.configure(selectbackground="#d9d9d9")
        self.LBselframe.bind('<<ListboxSelect>>', frame_builder.frame_select_handle)

        self.Mmessages: tk.Message = tk.Message(self.top)
        self.Mmessages.place(relx=0.052, rely=0.903, relheight=0.051, relwidth=0.536)
        self.Mmessages.configure(anchor='w')
        self.Mmessages.configure(background="#919191")
        self.Mmessages.configure(font="-family {DejaVu Sans} -size 10")
        self.Mmessages.configure(highlightbackground="#919191")
        self.Mmessages.configure(padx="1")
        self.Mmessages.configure(pady="1")
        self.Mmessages.configure(relief="solid")
        self.Mmessages.configure(width=416)

        self.LFdisplayframe: tk.LabelFrame = tk.LabelFrame(self.top)
        self.LFdisplayframe.place(relx=0.271, rely=0.088, relheight=0.517, relwidth=0.513)
        self.LFdisplayframe.configure(relief='ridge')
        self.LFdisplayframe.configure(font="-family {DejaVu Sans} -size 10")
        self.LFdisplayframe.configure(text='''Display Frame''')
        self.LFdisplayframe.configure(background="#919191")
        self.LFdisplayframe.configure(cursor="spraycan")
        self.LFdisplayframe.configure(highlightbackground="#919191")
        # Configure the grid for the display Frame
        self.LFdisplayframe.columnconfigure(list(range(frame_builder.N_COLUMNS)), weight=1)
        self.LFdisplayframe.rowconfigure(list(range(frame_builder.N_ROWS)), weight=1)
        # Generate and fill the display frame grid with empty labels
        self.display_grid_labels = list()
        for row_index in range(frame_builder.N_ROWS):
            # Initialize the row list
            self.display_grid_labels.append(list())
            # Fill the row list with labels
            for col_index in range(frame_builder.N_COLUMNS):
                # Create a label and assign it to the grid
                display_grid_label = tk.Button(self.LFdisplayframe)
                display_grid_label.configure(background="#ffffff")
                display_grid_label.configure(borderwidth=1)
                display_grid_label.configure(relief="groove")
                display_grid_label.configure(command=lambda c_index=col_index, r_index=row_index: frame_builder.painter_handle(c_index, r_index))
                display_grid_label.grid(column=col_index, row=row_index, sticky='nesw')
                # Store label in list
                self.display_grid_labels[row_index].append(display_grid_label)

        self.LFcolorselect: tk.LabelFrame = tk.LabelFrame(self.top)
        self.LFcolorselect.place(relx=0.052, rely=0.177, relheight=0.251, relwidth=0.174)
        self.LFcolorselect.configure(relief='groove')
        self.LFcolorselect.configure(font="-family {DejaVu Sans} -size 10")
        self.LFcolorselect.configure(text='''Color select''')
        self.LFcolorselect.configure(background="#919191")
        self.LFcolorselect.configure(highlightbackground="#919191")
        # Configure the grid for the color Frame
        self.LFcolorselect.columnconfigure(0, weight=1)
        self.LFcolorselect.rowconfigure(list(range(frame_builder.N_ROWS)), weight=1)
        # Generate and fill the color frame grid with coloured buttons
        self.color_grid_labels = list()
        bg_color_list: list[str] = ["#000000", "#0000ff", "#00ff00", "#00ffff", "#ff0000", "#ff00ff", "#ffff00", "#ffffff"]
        bg_active_color_list: list[str] = ["#000000", "#0000cc", "#00cc00", "#00cccc", "#cc0000", "#cc00cc", "#cccc00", "#cccccc"]
        for row_index in range(len(bg_color_list)):
            # Create a button and assign it to the grid
            color_grid_label = tk.Button(self.LFcolorselect)
            color_grid_label.configure(background=bg_color_list[row_index])
            color_grid_label.configure(activebackground=bg_active_color_list[row_index])
            color_grid_label.configure(borderwidth=1)
            color_grid_label.configure(relief="raised")
            color_grid_label.configure(command=lambda row_index=row_index: frame_builder.color_select_handle(bg_color_list[row_index]))
            color_grid_label.grid(column=0, row=row_index, sticky='nesw')
            # Store label in list
            self.color_grid_labels.append(color_grid_label)

def start_up() -> None:
    frame_builder.main()

if __name__ == '__main__':
    frame_builder.main()
